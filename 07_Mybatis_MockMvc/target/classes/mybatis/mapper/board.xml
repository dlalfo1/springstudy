<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 mybatis.mapper.board.xml 파일을 의미한다 -->
<mapper namespace="mybatis.mapper.board">

	<!-- 
		parameterType : DAO에서 mapper로 받아오는 값의 타입
		resultType : mapper에서 DAO로 반환하는 값의 타입(insert, update, delete는 사용하지 못한다.)
	 -->

	<!-- SELECT문 실행시 parameterType은 적을 필요가 없다. 받을게 없기 때문이다.  -->	
	<!-- resultType에는 ArrayList에 저장될 개별 요소 하나하나인 List(Board)가 반환타입니다. -->
	<!-- resultType은 SELECT 쿼리문 사용시에만 사용된다. -->
	<!-- com.gdu.app06.domain.BoardDTO에 별명을 지어줬기 때문에 Board 이름 사용 가능하다. -->
	<select id="selectBoardList" resultType="Board">
		SELECT BOARD_NO, TITLE, CONTENT, WRITER, CREATED_AT, MODIFIED_AT 
		  FROM BOARD 
	  ORDER BY BOARD_NO DESC
	</select> 
	
	<!-- mapper가 받을 건 boardNo이기때문에 그의 타입인 int를 적는다. -->
	<!-- mapper가 반환할 건 객체 하나로 Board이다. -->
	<!-- 변수 처리는 #{ } 이 안에 적어준다. -->
	<select id="selectBoardByNo" parameterType="int" resultType="Board">
		SELECT BOARD_NO, TITLE, CONTENT, WRITER, CREATED_AT, MODIFIED_AT
		  FROM BOARD 
		 WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 삽입시 BoardDTO의 필드변수 중 boardNo는 시퀀스가 해결해주고 createdAt, modifiedAt은 SYSDATE가 알아서 채워준다. -->
	<!-- 채워줄 변수는 title, content, writer가 되는 것이다. -->
	<!-- 삽입, 수정, 삭제 후 반환해줘야할건 없기 때문에 resultType 속성이 없다. -->
	<insert id="insertBoard" parameterType="Board">
		INSERT INTO BOARD 
			(BOARD_NO, TITLE, CONTENT, WRITER, CREATED_AT, MODIFIED_AT)
		VALUES
	   		(BOARD_SEQ.NEXTVAL, #{title}, #{content}, #{writer}, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'))
	</insert>
	
	<update id="updateBoard" parameterType="Board">
	UPDATE BOARD
		   SET TITLE = #{title}
		 , CONTENT = #{content}
		 , MODIFIED_AT = TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') 
     WHERE BOARD_NO = #{boardNo}
	</update>
	
	<delete id="deleteBoard" parameterType="int">
		DELETE FROM BOARD 
		WHERE BOARD_NO = #{boardNo}
	</delete>
	
</mapper>
